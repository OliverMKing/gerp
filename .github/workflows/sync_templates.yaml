name: Synchronize Templates
on:
  workflow_call:
    inputs:
      committer:
        default: "GitHub <noreply@github.com>"
        type: string
        description: "Committer to use for the PR in the format: 'username <email@website.com>'"
        required: false
    secrets:
      PAT:
        required: true
      GPG_PRIVATE_KEY:
        required: false
      GPG_PASSPHRASE:
        required: false

jobs:
  setup:
    name: "Setup"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.setVariables.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3

      - id: setVariables
        run: |
          repos=$(jq '.repos | keys' -c .gerp/config.json)
          echo "::set-output name=matrix::$repos"

      - run: |
          echo '### Template synchronization' >> $GITHUB_STEP_SUMMARY
          echo 'Started template synchronization' >> $GITHUB_STEP_SUMMARY
          echo 'Created pull requests will be shown below' >> $GITHUB_STEP_SUMMARY
  make-pr:
    name: "Make PR on ${{matrix.repo}}"
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        repo: ${{fromJson(needs.setup.outputs.matrix)}}
    steps:
      - name: Checkout template repository
        uses: actions/checkout@v3
        with:
          path: "template-repo"

      - name: Checkout target repository
        uses: actions/checkout@v3
        with:
          repository: ${{matrix.repo}}
          path: "target-repo"

      - name: Install Mustache
        run: npm install -g mustache

      - name: Generate files
        run: |
          repo=${{ matrix.repo }}
          jq --arg repo "$repo" '.repos[$repo].inputs' $GITHUB_WORKSPACE/template-repo/.gerp/config.json > inputs.json
          for f in $(find $GITHUB_WORKSPACE/template-repo/template -type f); do
            outpath=$GITHUB_WORKSPACE/target-repo/${f#./*/}
            mkdir -p $(dirname $outpath) && touch $outpath
            mustache inputs.json $f > $outpath
            echo generated $outpath
          done

      - name: GPG Secret Check
        env:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.GPG_PASSPHRASE}}
          gpg_comitter: ${{ inputs.committer}}
        if: ${{ env.gpg_private_key == '' || env.gpg_passphrase == '' || env.gpg_committer == '' }}
        run: |
          echo "SKIPPING GPG, MISSING GPG SECRETS"

      - name: Enable GPG Signing 
        uses: crazy-max/ghaction-import-gpg@v3
        env:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.GPG_PASSPHRASE}}
          gpg_comitter: ${{ secrets.GPG_COMMITTER }} 
        if: ${{ env.gpg_private_key != '' && env.gpg_passphrase != '' && env.gpg_committer != 'GitHub <noreply@github.com>' }}
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git-user-signingkey: true
          git-commit-gpgsign: true

      - name: Create pull request
        id: create-pr
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.PAT }}
          path: target-repo
          commit-message: "GERP updated files from templates"
          title: "GERP sync from ${{ github.REPOSITORY }}"
          body: "GERP synchronizing template from ${{ github.REPOSITORY }}"
          delete-branch: true
          committer: ${{ inputs.committer }}

      - name: Print Summary
        run: echo "- ${{ steps.create-pr.outputs.pull-request-url }}" >> $GITHUB_STEP_SUMMARY
  finish:
    name: "Finish"
    needs: make-pr
    runs-on: ubuntu-latest
    steps:
      - run: echo 'Finished template synchronization' >> $GITHUB_STEP_SUMMARY
